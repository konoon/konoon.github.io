package debugex;

//배열 이용 정렬(Sort) 확인

public class DebugEx04_Sort{
	public static void main(String[] args) {
		int a[] = { 40, 30, 50, 10, 20 }; 

		// a[0]=40; a[1]=30; a[2]=50; a[3]=10; a[4]=20;

		System.out.println("<<정렬전>>"); // (1) BreakPoint 찍어봄 : Step Over(F6) 실행해 봄
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " "); }
		// a[0]=40; a[1]=30; a[2]=50; a[3]=10; a[4]=20;
		// <<정렬전>>
		// 40, 30, 50, 10, 20

		int temp;
		for (int i = 0; i < a.length; i++) {
				// a.length = 요소 크기 5개 = 5
				//i++
		// int i = 0; int i = 1; int i = 2; int i = 3;


			for (int j = i + 1; j < a.length; j++) {
			// > 를 < 로 바꿔보기 정렬 순서 바뀜
				if (a[i] > a[j]) {  
					temp = a[i];
					a[i] = a[j];
					a[j] = temp;
				}

		// a.length = 요소 크기 5개 = 5
		
		// int j = 0 + 1 = 1; int j = 1 + 1 = 2; int j = 2 + 1 = 3; int j = 3 + 1 = 4;

		// a[0] = 40; a[1] = 30; a[2] = 50; a[3] = 10; a[4] = 20; {40, 30, 50, 10, 20}

		// a[0] = 40 > a[1] = 30 = true
		//  temp = a[0] = 40
		//  a[i] = a[1] = 30
		//  a[j] = temp = a[0] = 40
		//  그러므로, 30이 왼쪽으로 가고 40이 오른쪽에 배치되는 자료구조 형성 : 30, 40, 50, 10, 20

		// a[1] = 30 > a[2] = 50 = false

		// a[2] = 50 > a[3] = 30 = true
		//  temp = a[2] = 50
		//  a[i] = a[1] = 30
		//  a[j] = temp = a[2] = 50
		// 그러므로, 30이 왼쪽으로 가고 50이 오른쪽에 배치되는 자료구조 형성 : 30, 40, 50, 10, 20

		// a[3] = 10 > a[4] = 20 = false

		// a[0] = 40 > a[2] = 50 = false

		// a[1] = 30 > a[3] = 10 = true
		//  temp = a[1] = 30
		//  a[i] = a[3] = 10
		//  a[j] = temp = a[1] = 30
		// 그러므로, 10이 왼쪽으로 가고 30이 오른쪽에 배치되는 자료구조 형성 : 10, 30, 40, 50, 20

		// a[2] = 50 > a[4] = 20 = true
		//  temp = a[2] = 50
		//  a[i] = a[4] = 20
		//  a[j] = temp = a[2] = 50
		// 그러므로, 20이 왼족으로 가고 50이 오른쪽에 배치되는 자료구조 형성 : 10, 30, 40, 20, 50

		// a[0] = 40 > a[3] = 10 = true
		//  temp = a[0] = 40
		//  a[i] = a[3] = 10
		//  a[j] = temp = a[0] = 40
		//  그러므로, 10이 왼쪽으로 가고 40이 오른쪽에 배치되는 자료 구조 형성 : 10, 30, 40, 20, 50

		// a[1] = 30 > a[4] = 20 = true
		//  temp = a[1] = 30
		//  a[i] = a[4] = 20
		//  a[j] = temp = a[1] = 30
		// 그러므로, 20이 왼쪽으로 가고 30이 오른쪽에 배치되는 자료 구조 형성 : 10, 20, 30, 40, 50

		// a[0] = 40 > a[4] = 20 = true
		//  temp = a[0] = 40
		//  a[i] = a[4] = 20
		//  a[j] = temp = a[0] = 40
		// 그러므로, 20이 왼쪽으로 가고 40이 오른쪽에 배치되는 자료 구조 형성 : 10, 20, 30, 40, 50

// ===========================================================================================
			/* > 를 < 로 바꿔보기 정렬 순서 바뀜
				if (a[i] < a[j]) {  
					temp = a[i];
					a[i] = a[j];
					a[j] = temp;
				} */

		// a[0] = 40; a[1] = 30; a[2] = 50; a[3] = 10; a[4] = 20; {40, 30, 50, 10, 20}

		// a[0] = 40 < a[1] = 30 = false

		// a[1] = 30 < a[2] = 50 = true
		//  temp = a[1] = 30
		//  a[i] = a[2] = 50
		//  a[j] = temp = a[1] = 30
		// 50이 앞으로 가고 30이 뒤로 자리가 바뀐 자료구조 형성 : 40, 50, 30, 10, 20

		// a[2] = 50 < a[3] = 10 = false

		// a[3] = 10 < a[4] = 20 = true
		//  temp = a[3] = 10
		//  a[i] = a[4] = 20
		//  a[j] = temp = a[3] = 10
		// 20이 앞으로 가고 10이 뒤로 자리가 바뀐 자료구조 형성 : 40, 50, 30, 20, 10

		// a[0] = 40 < a[2] = 50 = true
		//  temp = a[0] = 40
		//  a[i] = a[2] = 50
		//  a[j] = temp = a[0] = 40
		// 50이 앞으로 가고 40이 뒤로 자리가 바뀐 자료구조 형성 : 50, 40, 30, 20, 10

		// a[1] = 30 < a[3] = 10 = false

		// a[2] = 50 < a[4] = 20 = false

		// a[0] = 40 < a[3] = 10 = false

		// a[1] = 30 < a[4] = 20 = false

		// a[0] = 40 < a[4] = 20 = false

// ============================================================================================

			}
		}

		System.out.println("\n<<정렬후>>");
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
	}
}
